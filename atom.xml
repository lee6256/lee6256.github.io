<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leeleg</title>
  
  <subtitle>来自地球的开发者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-02T15:00:19.307Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leeleg</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ArrayList的实现原理</title>
    <link href="http://yoursite.com/2018/08/02/ArrayList%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>http://yoursite.com/2018/08/02/ArrayList的实现原理/</id>
    <published>2018-08-02T14:56:43.000Z</published>
    <updated>2018-08-02T15:00:19.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="又是写在开篇的话"><a href="#又是写在开篇的话" class="headerlink" title="又是写在开篇的话"></a>又是写在开篇的话</h3><p>&emsp;&emsp;我们使用集合类往往都是调用它们的增、删、改、查这些方法，所以我想先从这四个方面去了解集合类。当然，我们还得结合一些总结去看代码，去知其所以然。<br><a href="https://lee6256.github.io/2018/07/22/%E4%B8%80%E4%BA%9BJava%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">那次，与总结的第一邂逅</a></p><h3 id="开始旅途的第一步"><a href="#开始旅途的第一步" class="headerlink" title="开始旅途的第一步"></a>开始旅途的第一步</h3><p>&emsp;&emsp;在Android中，为何展示数据的Adapter多数都是使用ArrayList？根据之前总结的特性，ArrayList的随机查找和修改是高效的，删除和插入则相反，这里肯定有猫腻。当然，不能忘记之前的<a href="https://lee6256.github.io/2018/07/21/%E4%BB%8EConcurrentModificationException%E4%BA%86%E8%A7%A3Java%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0/" target="_blank" rel="noopener">并发冲突的问题</a>。<br>&emsp;&emsp;ArrayList在进行add、remove和clear时，内部一个记录这些修改元素的操作值会发生改变。</p><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;  <span class="comment">// 使用默认构造方法创建数组时的大小</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;  <span class="comment">// 标识 elementData 创建时长度为 0</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;  <span class="comment">// 标识 elementData 使用默认构造方法创建</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData;  <span class="comment">// 内部数据结构</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;  <span class="comment">// 记录元素个数</span></span><br></pre></td></tr></table></figure><p>在remove或add的时候会改变size。注意，数组长度与元素个数不是相等的。</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>三个构造方法都比较简单，但要关注elementData是怎么被初始化的。值得注意的是第三个构造方法，以实现了Collection接口的集合类，来初始化elementData，先通过调用toArray转换成数组，再调用Array.copyOf把传进来的集合复制给elementData。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认初始化一个空数组</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 由参数控制初始化数组的大小</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; <span class="number">0</span>) &#123;  <span class="comment">// 此处初始化数组</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (initialCapacity == <span class="number">0</span>) &#123;  <span class="comment">// 创建一个标识为长度是 0 的空数组</span></span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 参数错误，抛出错误</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span> + initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    elementData = c.toArray();</span><br><span class="line">    <span class="keyword">if</span> ((size = elementData.length) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">            elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>值得注意的几个方法，都是经常出现的。而第三个方法就是导致ArrayList插入、删除效率低的原因。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ArrayList.java 不同的集合有不同的toArray实现</span></span><br><span class="line"><span class="keyword">public</span> Object[] toArray() &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.copyOf(elementData, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Arrays.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    T[] copy = ((Object)newType == (Object)Object[].class)</span><br><span class="line">        ? (T[]) <span class="keyword">new</span> Object[newLength]</span><br><span class="line">        : (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">    System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">                     Math.min(original.length, newLength));</span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// System.java </span></span><br><span class="line"><span class="comment">// srcPos 和 destPos 都分别表示 src 和 dest 数组想复制的起点，length表示复制的个数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span> srcPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    Object dest, <span class="keyword">int</span> destPos,</span></span></span><br><span class="line"><span class="function"><span class="params">                                    <span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure></p><h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><p>ArrayList是一个可以自动扩容的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// 扩容检查</span></span><br><span class="line">    elementData[size++] = e;  <span class="comment">// 数组末尾添加元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">    ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">    System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>, size - index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// 扩容检查</span></span><br><span class="line">    System.arraycopy(a, <span class="number">0</span>, elementData, size, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addAll</span><span class="params">(<span class="keyword">int</span> index, Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    rangeCheckForAdd(index);  <span class="comment">// 检查是否越界</span></span><br><span class="line"></span><br><span class="line">    Object[] a = c.toArray();</span><br><span class="line">    <span class="keyword">int</span> numNew = a.length;</span><br><span class="line">    ensureCapacityInternal(size + numNew);  <span class="comment">// 扩容检查</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index;  <span class="comment">// 原来数组 index 后的元素个数 = 原来的元素个数 - index</span></span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + numNew, numMoved);</span><br><span class="line">        System.arraycopy(a, <span class="number">0</span>, elementData, index, numNew);</span><br><span class="line">    size += numNew;</span><br><span class="line">    <span class="keyword">return</span> numNew != <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以下为扩充方法。注意，ArrayList扩容是有上限的，数组最大长度为<strong>Integer.MAX_VALUE</strong>。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;  <span class="comment">// 是否为默认构造方法创建的空数组</span></span><br><span class="line">        minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);  <span class="comment">// </span></span><br><span class="line">    &#125;</span><br><span class="line">    ensureExplicitCapacity(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    modCount++;  <span class="comment">// 增加数组的操作次数，AbstractList的成员变量</span></span><br><span class="line">    <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">        grow(minCapacity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);  <span class="comment">// 默认扩容一半</span></span><br><span class="line">    <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)  <span class="comment">// 扩容后的大小不足以容纳所有的元素，则使用最小的能容纳所有元素的值</span></span><br><span class="line">        newCapacity = minCapacity;</span><br><span class="line">    <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)  <span class="comment">// 扩容后超过数组所能容纳的阈值，则使用最小的能容纳所有元素的值</span></span><br><span class="line">        newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">    <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">    elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>addAll都是使用 System.arraycopy 完成元素添加，而grow方法使用 Arrays.copyOf 完成数组扩容迁移。</p><h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    modCount++;</span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><p>改和查都是直接通过下标直接访问，时间复杂度为O(1)，所以ArrayList的随机访问是高效率的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    E oldValue = elementData(index);</span><br><span class="line">    elementData[index] = element;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">E <span class="title">elementData</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (E) elementData[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    rangeCheck(index);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> elementData(index);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Android为何高频使用ArrayList有了点眉目"><a href="#Android为何高频使用ArrayList有了点眉目" class="headerlink" title="Android为何高频使用ArrayList有了点眉目"></a>Android为何高频使用ArrayList有了点眉目</h3><p>Android在loading新的数据往往会在List的尾部添加，而ArrayList往尾部添加新数据时不需要成批复制数组；需要与某个Item互动时，随机访问的时间复杂度是O(1)；很多时候，都只是展示数据，或是更改某个Item。如果有比较多删除Item的业务，那么你需要分析自己的功能，对不同的数据结构进行一个权衡，这样，有助于提升APP的性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;又是写在开篇的话&quot;&gt;&lt;a href=&quot;#又是写在开篇的话&quot; class=&quot;headerlink&quot; title=&quot;又是写在开篇的话&quot;&gt;&lt;/a&gt;又是写在开篇的话&lt;/h3&gt;&lt;p&gt;&amp;emsp;&amp;emsp;我们使用集合类往往都是调用它们的增、删、改、查这些方法，所以我想先从
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>一些Java集合类的总结</title>
    <link href="http://yoursite.com/2018/07/22/%E4%B8%80%E4%BA%9BJava%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/07/22/一些Java集合类的总结/</id>
    <published>2018-07-22T13:05:31.000Z</published>
    <updated>2018-08-02T15:20:44.962Z</updated>
    
    <content type="html"><![CDATA[<h3 id="写在开头的话"><a href="#写在开头的话" class="headerlink" title="写在开头的话"></a>写在开头的话</h3><p>我并不打算一开始就把所有的Java类都拉出来看一遍，毕竟常用的就那么几个，而且它们之间的一些实现原理是相通的，只是根据不同的情况做了改变。因此，我打算从一些基础的Java集合类开始看起，但在此之前先把它们的某些特性了解清楚，如：是否线程安全；内部的数据结构是怎样的。因为知其然，后知所以然，从顶层俯视底层，这样看代码会保有一种清晰的逻辑结构。在这里不会细说实现，只做概括。  </p><h3 id="主角们"><a href="#主角们" class="headerlink" title="主角们"></a>主角们</h3><h4 id="各自的归属"><a href="#各自的归属" class="headerlink" title="各自的归属"></a>各自的归属</h4><hr><p>首先，从接口中知道它们都有什么样的功能，以下是各种接口的简单介绍： </p><p><strong>List：</strong> 定义了List系的数据操作<br><strong>Map：</strong> 定义了Map系的数据操作<br><strong>Serializable：</strong> 对象可序列化<br><strong>Cloneable：</strong> 对象可拷贝，重写clone方法必须实现此接口<br><strong>Collection：</strong> 其实这个接口也继承了Iterable接口，可以使用Iterator迭代元素。<br><strong>RandomAccess：</strong> 标志该集合类应当使用哪种遍历算法提高效率<br><img src="/2018/07/22/一些Java集合类的总结/01.png" alt=""><br><img src="/2018/07/22/一些Java集合类的总结/02.png" alt=""> </p><p><style> table th:nth-of-type(1) { width: 100px; } table th:nth-of-type(2) { width: 90px; } table th:nth-of-type(3) { width: 120px; }<br></style></p><h4 id="各自的个性"><a href="#各自的个性" class="headerlink" title="各自的个性"></a>各自的个性</h4><table><thead><tr><th style="text-align:center">集合</th><th style="text-align:center">线程安全性</th><th style="text-align:center">内部数据结构</th><th style="text-align:center">效率</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">ArrayList</td><td style="text-align:center">不安全</td><td style="text-align:center">数组</td><td style="text-align:center">访问快，插入、删除慢</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">LinkedList</td><td style="text-align:center">不安全</td><td style="text-align:center">双向循环链表</td><td style="text-align:center">修改、查找慢，插入、删除快</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">HashMap</td><td style="text-align:center">不安全</td><td style="text-align:center">数组+单链表+红黑树</td><td style="text-align:center">一般情况下增删改查都是高效率，内部结构变复杂后效率下降</td><td style="text-align:center">HashMap会根据需要改变内部数据结构</td></tr><tr><td style="text-align:center">LinkedHashMap</td><td style="text-align:center">不安全</td><td style="text-align:center">数组+双向链表</td><td style="text-align:center">-</td><td style="text-align:center">可实现LRU算法</td></tr><tr><td style="text-align:center">HashTable</td><td style="text-align:center">安全</td><td style="text-align:center">数组+单链表+红黑树</td><td style="text-align:center">同HashMap</td><td style="text-align:center">同HashMap</td></tr><tr><td style="text-align:center">ConcurrentHashMap</td><td style="text-align:center">安全</td><td style="text-align:center">数组+双向链表+红黑树</td><td style="text-align:center">同HashMap</td><td style="text-align:center">同HashMap</td></tr><tr><td style="text-align:center">CopyOnWriteArrayList</td><td style="text-align:center">安全</td><td style="text-align:center">数组</td><td style="text-align:center">读操作效率高，写操作效率低</td><td style="text-align:center">会有内存占用和数据一致性问题</td></tr></tbody></table><p>从上面的内部数据结构中可以发现一些问题，List系要么只有数组，要么只有链表；而Map都是数组+链表，甚至还有红黑树。其实，Map系是因为要解决相同元素冲突产生碰撞，而采用这种设计，也就是散列表。单向链表和双向链表的区别是，双向链表可以做到顺序存储。红黑树的引入是在JDK8之后添加的，目的是当Map系集合类的元素碰撞过多时，把过长的链表转换为红黑树以提高访问效率。  </p><hr><p>接下来的就是充满挑战的源码之旅了，希望自己能够坚持下去，然后当作日记去记录下来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;写在开头的话&quot;&gt;&lt;a href=&quot;#写在开头的话&quot; class=&quot;headerlink&quot; title=&quot;写在开头的话&quot;&gt;&lt;/a&gt;写在开头的话&lt;/h3&gt;&lt;p&gt;我并不打算一开始就把所有的Java类都拉出来看一遍，毕竟常用的就那么几个，而且它们之间的一些实现原理是相通的
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>从ConcurrentModificationException了解Java集合类的一些实现</title>
    <link href="http://yoursite.com/2018/07/21/%E4%BB%8EConcurrentModificationException%E4%BA%86%E8%A7%A3Java%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/07/21/从ConcurrentModificationException了解Java集合类的一些实现/</id>
    <published>2018-07-21T15:07:25.000Z</published>
    <updated>2018-07-22T13:10:21.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ConcurrentModificationException的出现"><a href="#ConcurrentModificationException的出现" class="headerlink" title="ConcurrentModificationException的出现"></a>ConcurrentModificationException的出现</h3><p>ConcurrentModificationException，也就是<strong>并发修改</strong>异常，当我们使用一些Java集合类时，有时需要遍历集合并根据条件remove其中的元素，此时就有可能出现该异常。我们看个简单的例子，注意 <strong>list.remove(bean)</strong> 这一行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentModifyExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Bean&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Bean(<span class="number">0</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Bean(<span class="number">1</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Bean(<span class="number">2</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Bean(<span class="number">3</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Bean(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Bean bean : list) &#123;</span><br><span class="line">            System.out.println(bean.value);</span><br><span class="line">            <span class="keyword">if</span> (bean.value == <span class="number">2</span>)</span><br><span class="line">                list.remove(bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Bean</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2018/07/21/从ConcurrentModificationException了解Java集合类的一些实现/01.png" alt=""><br>从上面的输出信息我们可以看到，在程序输出“3”之前出现了ConcurrentModificationException，也就是说，该异常是在遍历下一个元素时抛出的。总的来说，删除和遍历产生了冲突。<br>如果改变删除的元素为倒数第二个，就是 <strong>bean.value = 3</strong> 时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (Bean bean : list) &#123;</span><br><span class="line">    System.out.println(bean.value);</span><br><span class="line">    if (bean.value == 3)</span><br><span class="line">        list.remove(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2018/07/21/从ConcurrentModificationException了解Java集合类的一些实现/02.png" alt=""><br>程序没有抛出ConcurrentModificationException，但是在打印“4”之前程序就结束了，这是为什么呢？</p><h3 id="从ArrayList内部看异常出现的原因"><a href="#从ArrayList内部看异常出现的原因" class="headerlink" title="从ArrayList内部看异常出现的原因"></a>从ArrayList内部看异常出现的原因</h3><h4 id="ArrayList的遍历"><a href="#ArrayList的遍历" class="headerlink" title="ArrayList的遍历"></a>ArrayList的遍历</h4><p>在例子中使用了foreach去遍历元素，实际上，foreach遍历的原理就是使用Iterator进行迭代，可以通过javap进行反编译即可查看到相关的字节码指令（看84行的注释）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">... ...</span><br><span class="line">74: invokespecial #5                  // Method ConcurrentModifyExceptionDemo$Bean.&quot;&lt;init&gt;&quot;:(I)V</span><br><span class="line">77: invokeinterface #6,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span><br><span class="line">82: pop</span><br><span class="line">83: aload_1</span><br><span class="line">84: invokeinterface #7,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;</span><br><span class="line">89: astore_2</span><br><span class="line">90: aload_2</span><br><span class="line">91: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p><p>这是因为集合类所实现的Collection接口继承了Iterable这个接口，因此都能够使用foreach的方式遍历。在ArrayList所实现的iterator方法中，返回的是ArrayList的内部类Itr。在Itr实现的next方法中，会先判断两个值是否相等，改变记录下标cursor和lastRet的值，从0下标开始返回ArrayList内部数组的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> limit = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;  <span class="comment">// modCount是AbstractList的成员变量，表示对List的修改次数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor &lt; limit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= limit)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            limit--;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="ArrayList的删除"><a href="#ArrayList的删除" class="headerlink" title="ArrayList的删除"></a>ArrayList的删除</h4><p>在next方法中，首先会判断两个表示修改次数的值是否相等，一次来自List的修改，一次来自Iterator的修改，如果不同就抛出ConcurrentModificationException。ArrayList的源码中，remove方法实现如下。传入的对象为空，则清空List，否则删除指定元素，具体如何删除通过fastRemove方法完成。fastRemove会改变modCount的值，然后通过调用arraycopy把index后的所有元素都往前移动，然后List的大小-1。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="真相开始明朗"><a href="#真相开始明朗" class="headerlink" title="真相开始明朗"></a>真相开始明朗</h4><p>回到例子中，代码 <strong>list.remove(bean)</strong> 对List进行了一次修改，那么modCount+1，但没有同步到Itr中的expectedModCount。因此，在list.remove(bean)后，iterator调用next()访问下一个元素时，就会导致modCount != expectedModCount，抛出异常。但是，在Itr的remove方法的实现中，每次操作都会把modCount同步到expectedModCount，这样，就不会抛出异常了。因此，正确的遍历删除如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Bean&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Bean bean = iterator.next();</span><br><span class="line">    System.out.println(bean.value);</span><br><span class="line">    <span class="keyword">if</span> (bean.value == <span class="number">2</span>)</span><br><span class="line">        iterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在输出“4”之前程序结束的情况中，因为List在删除元素后会减小记录自身元素个数的值，也就是size从5变为了4，而此时，遍历访问的下标由3来到了4，也就是访问bean.value = 3的下标向后移了。Itr的hasNext()此时判断，List已经没有元素可以访问了，于是返回了false。  </p><p>然而这仅仅只是单线程冲突的情况，多线程环境下我们还需要了解其他的集合类。这里只是抛砖引玉，往后会继续分析更多的Java集合类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ConcurrentModificationException的出现&quot;&gt;&lt;a href=&quot;#ConcurrentModificationException的出现&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentModificationEx
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
</feed>
