<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Leeleg</title>
  
  <subtitle>来自地球的开发者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-22T03:23:04.688Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Leeleg</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一些Java集合类的总结</title>
    <link href="http://yoursite.com/2018/07/22/%E4%B8%80%E4%BA%9BJava%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/07/22/一些Java集合类的总结/</id>
    <published>2018-07-22T03:22:46.000Z</published>
    <updated>2018-07-22T03:23:04.688Z</updated>
    
    <content type="html"><![CDATA[<style>table th:nth-of-type(1) {    width: 100px;}</style><h3 id="写在开头的话"><a href="#写在开头的话" class="headerlink" title="写在开头的话"></a>写在开头的话</h3><p>我并不打算一开始就把所有的Java类都拉出来看一遍，毕竟常用的就那么几个，而且它们之间的一些实现原理是相通的，只是根据不同的情况做了改变。因此，我打算从一些基础的Java集合类开始看起，但在此之前先把它们的某些特性了解清楚，如：是否线程安全；内部的数据结构是怎样的。因为知其然，后知所以然，从顶层俯视底层，这样看代码会保有一种清晰的逻辑结构。在这里不会细说实现，只做概括。  </p><h3 id="主角们"><a href="#主角们" class="headerlink" title="主角们"></a>主角们</h3><table><thead><tr><th style="text-align:center">集合</th><th style="text-align:center">线程安全性</th><th style="text-align:center">内部数据结构</th><th style="text-align:center">效率</th><th style="text-align:center">备注</th></tr></thead><tbody><tr><td style="text-align:center">ArrayList</td><td style="text-align:center">不安全</td><td style="text-align:center">数组</td><td style="text-align:center">访问快，插入、删除慢</td></tr><tr><td style="text-align:center">LinkedList</td><td style="text-align:center">不安全</td><td style="text-align:center">双向循环链表</td><td style="text-align:center">修改、查找快，插入、删除慢</td></tr><tr><td style="text-align:center">HashMap</td><td style="text-align:center">不安全</td><td style="text-align:center">数组+单链表+红黑树</td><td style="text-align:center">一般情况下增删改查都是高效率，内部结构变复杂后效率下降</td><td style="text-align:center">HashMap会根据需要改变内部数据结构</td></tr></tbody></table><table><br>    <thead><br>        <tr><br>            <th>集合</th><br>            <th>线程安全性</th><br>            <th>内部数据结构</th><br>            <th>效率</th><br>            <th>备注</th><br>        </tr><br>    </thead><br>    <tbody><br>       <tr><br>            <td>HashMap</td><br>            <td>不安全</td><br>            <td>数组+单链表+红黑树</td><br>            <td>一般情况下增删改查都是高效率，内部结构变复杂后效率下降</td><br>            <td>HashMap会根据需要改变内部数据结构</td><br>       </tr><br>    </tbody><br></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;style&gt;
table th:nth-of-type(1) {
    width: 100px;
}
&lt;/style&gt;

&lt;h3 id=&quot;写在开头的话&quot;&gt;&lt;a href=&quot;#写在开头的话&quot; class=&quot;headerlink&quot; title=&quot;写在开头的话&quot;&gt;&lt;/a&gt;写在开头
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从ConcurrentModificationException了解Java集合类的一些实现</title>
    <link href="http://yoursite.com/2018/07/21/%E4%BB%8EConcurrentModificationException%E4%BA%86%E8%A7%A3Java%E9%9B%86%E5%90%88%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/07/21/从ConcurrentModificationException了解Java集合类的一些实现/</id>
    <published>2018-07-21T15:07:25.000Z</published>
    <updated>2018-07-21T18:10:21.750Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ConcurrentModificationException的出现"><a href="#ConcurrentModificationException的出现" class="headerlink" title="ConcurrentModificationException的出现"></a>ConcurrentModificationException的出现</h3><p>ConcurrentModificationException，也就是<strong>并发修改</strong>异常，当我们使用一些Java集合类时，有时需要遍历集合并根据条件remove其中的元素，此时就有可能出现该异常。我们看个简单的例子，注意 <strong>list.remove(bean)</strong> 这一行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentModifyExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Bean&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="keyword">new</span> Bean(<span class="number">0</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Bean(<span class="number">1</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Bean(<span class="number">2</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Bean(<span class="number">3</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> Bean(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Bean bean : list) &#123;</span><br><span class="line">            System.out.println(bean.value);</span><br><span class="line">            <span class="keyword">if</span> (bean.value == <span class="number">2</span>)</span><br><span class="line">                list.remove(bean);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> value;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Bean</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.value = value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2018/07/21/从ConcurrentModificationException了解Java集合类的一些实现/01.png" alt=""><br>从上面的输出信息我们可以看到，在程序输出“3”之前出现了ConcurrentModificationException，也就是说，该异常是在遍历下一个元素时抛出的。总的来说，删除和遍历产生了冲突。<br>如果改变删除的元素为倒数第二个，就是 <strong>bean.value = 3</strong> 时：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (Bean bean : list) &#123;</span><br><span class="line">    System.out.println(bean.value);</span><br><span class="line">    if (bean.value == 3)</span><br><span class="line">        list.remove(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><img src="/2018/07/21/从ConcurrentModificationException了解Java集合类的一些实现/02.png" alt=""><br>程序没有抛出ConcurrentModificationException，但是在打印“4”之前程序就结束了，这是为什么呢？</p><h3 id="从ArrayList内部看异常出现的原因"><a href="#从ArrayList内部看异常出现的原因" class="headerlink" title="从ArrayList内部看异常出现的原因"></a>从ArrayList内部看异常出现的原因</h3><h4 id="ArrayList的遍历"><a href="#ArrayList的遍历" class="headerlink" title="ArrayList的遍历"></a>ArrayList的遍历</h4><p>在例子中使用了foreach去遍历元素，实际上，foreach遍历的原理就是使用Iterator进行迭代，可以通过javap进行反编译即可查看到相关的字节码指令（看84行的注释）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">... ...</span><br><span class="line">74: invokespecial #5                  // Method ConcurrentModifyExceptionDemo$Bean.&quot;&lt;init&gt;&quot;:(I)V</span><br><span class="line">77: invokeinterface #6,  2            // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span><br><span class="line">82: pop</span><br><span class="line">83: aload_1</span><br><span class="line">84: invokeinterface #7,  1            // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;</span><br><span class="line">89: astore_2</span><br><span class="line">90: aload_2</span><br><span class="line">91: invokeinterface #8,  1            // InterfaceMethod java/util/Iterator.hasNext:()Z</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure></p><p>这是因为集合类所实现的Collection接口继承了Iterable这个接口，因此都能够使用foreach的方式遍历。在ArrayList所实现的iterator方法中，返回的是ArrayList的内部类Itr。在Itr实现的next方法中，会先判断两个值是否相等，改变记录下标cursor和lastRet的值，从0下标开始返回ArrayList内部数组的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> limit = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;  <span class="comment">// modCount是AbstractList的成员变量，表示对List的修改次数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor &lt; limit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= limit)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            limit--;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="ArrayList的删除"><a href="#ArrayList的删除" class="headerlink" title="ArrayList的删除"></a>ArrayList的删除</h4><p>在next方法中，首先会判断两个表示修改次数的值是否相等，一次来自List的修改，一次来自Iterator的修改，如果不同就抛出ConcurrentModificationException。ArrayList的源码中，remove方法实现如下。传入的对象为空，则清空List，否则删除指定元素，具体如何删除通过fastRemove方法完成。fastRemove会改变modCount的值，然后通过调用arraycopy把index后的所有元素都往前移动，然后List的大小-1。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="真相开始明朗"><a href="#真相开始明朗" class="headerlink" title="真相开始明朗"></a>真相开始明朗</h4><p>回到例子中，代码 <strong>list.remove(bean)</strong> 对List进行了一次修改，那么modCount+1，但没有同步到Itr中的expectedModCount。因此，在list.remove(bean)后，iterator调用next()访问下一个元素时，就会导致modCount != expectedModCount，抛出异常。但是，在Itr的remove方法的实现中，每次操作都会把modCount同步到expectedModCount，这样，就不会抛出异常了。因此，正确的遍历删除如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Bean&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Bean bean = iterator.next();</span><br><span class="line">    System.out.println(bean.value);</span><br><span class="line">    <span class="keyword">if</span> (bean.value == <span class="number">2</span>)</span><br><span class="line">        iterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在输出“4”之前程序结束的情况中，因为List在删除元素后会减小记录自身元素个数的值，也就是size从5变为了4，而此时，遍历访问的下标由3来到了4，也就是访问bean.value = 3的下标向后移了。Itr的hasNext()此时判断，List已经没有元素可以访问了，于是返回了false。  </p><p>然而这仅仅只是单线程冲突的情况，多线程环境下我们还需要了解其他的集合类。这里只是抛砖引玉，往后会继续分析更多的Java集合类。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ConcurrentModificationException的出现&quot;&gt;&lt;a href=&quot;#ConcurrentModificationException的出现&quot; class=&quot;headerlink&quot; title=&quot;ConcurrentModificationEx
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
    
  </entry>
  
</feed>
